; include file sample
;
; file : ~/.gitconfig
; [user]
;     name = John Grib
;     email = johngrib82@gmail.com
;     signingkey = 1234ABCDE
; [commit]
;     gpgsign = true
; [include]
;     path = ~/dotfiles/.gitconfig

[alias]
    l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
    la = "! git l --all"
    lh = "! # Show log | head \n\
        f() { \
            if [ $# = 0 ]; then \
                git l | head -n 25; \
            else \
                git l | head -n $1; \
            fi; \
        }; f"
    s = status -s
    co = checkout
    ci = commit
    ch = "!git bb $1"
    bb = "! # Branch tools. Type 'git bb help' ; \n\
        f() { \n\
            if [ $# = 0 ]; then \
                git checkout $(git bb select); \
            elif [ $1 = 'help' ]; then \
                echo 'git bb           : Select and checkout branch'; \
                echo 'git bb c, clean  : Clean all merged branches'; \
                echo 'git bb d, D      : Delete seleted branches(D: force)'; \
                echo 'git bb l, list   : List branches excluding the current branch'; \
                echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
            elif [ $1 = 'd' -o $1 = 'D' ]; then \
                git branch -$1 $(git bb list | fzf -m); \
            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
                git bclean; \
            elif [ $1 = 'list' -o $1 = 'l' ]; then \
                git blist; \
            elif [ $1 = 'merged' -o $1 = 'm' ]; then \
                git blist-merged; \
            elif [ $1 = 'select' -o $1 = 's' ]; then \
                git bselect; \
            else \
                git bb help; \
            fi; \
        }; f"
    b0 = "!git branch | awk '/^\\*/{print $2}'"
    bselect = "!git branch -vv | grep -v '^\\*' | fzf | awk '{print $1}'"
    blist = "!git branch | grep -v '^\\*'"
    blist-merged = "!git branch --merged | grep -v '^\\*\\|\\<master$'"
    bclean = "! # Search and delete merged branches;\n\
        git branch -d $(git blist-merged); \
        for branch in $(git blist) ; do \
            echo \"\nSearch :\\033[32m $branch \\033[0m\"; \
            if [ $(git l | grep $branch -c) -gt 0 ]; then \
                git l | egrep \"Merge.*$branch\\s\" -C 1; \
                read -p \"Delete $branch? [y|n] \" -r; \
                REPLY=${REPLY:-"n"}; \
                if [ $REPLY = \"y\" ]; then \
                    git branch -D $branch; \
                    echo \"\\033[32m$branch \\033[0mhas been\\033[31m deleted\\033[0m.\n\"; \
                fi; \
            fi; \
        done \n\
    "
    back = "!git branch backup-`git b0`"
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
    add-select = "!git add $(git status -s | fzf -m | awk '{print $2}')"
    a = "! # add files with fzf preview diffs; \n\
        f() { \
            _height=$(stty size | awk '{print $1}');\
            git s | fzf -m --preview \"git diff {2} | head -n $_height | pygmentize\" | awk '{print $2}' | xargs git add; \
        }; f"
    cleanbranch = "!git branch -d $(git branch --merged | grep -v '^\\*\\|\\<master$')"
    deletebranch = "!git branch -d $(git branch | grep -v '^\\*\\|\\<master$' | fzf -m)"
    alias = "!git config --list | egrep '^alias.+' | sed -e 's/^alias\\.//' | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/'"
    diffs = "!git diff $(git status -s | egrep '^\\s*M' | awk '{print $2}' | fzf -m)"
    sync = "!f() { git fetch $1 && git reset --hard $1/$(git b0); }; f"
[core]
    excludesfile = /Users/johngrib/.gitignore_global
    editor = /usr/local/bin/vim
    autocrlf = input
    precomposeunicode = true
    quotepath = false
[diff]
    tool = vimdiff
[difftool "vimdiff"]
    path = /usr/local/bin/vim
[merge]
    tool = vimdiff
[mergetool "vimdiff"]
    path = /usr/local/bin/vim
    trustExitCode = true

